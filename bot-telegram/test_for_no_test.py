import logging
import asyncio
import math

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode,ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# —á–µ—Ä–µ–∑ pip install –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å aiogram, logging, asyncio


# –∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token="YOur_token_bot")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class Form(StatesGroup):
    waiting_for_price = State()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FSM (Finite State Machine) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await Form.waiting_for_price.set()
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:")

# start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# reset - –û–±–Ω—É–ª–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
# formula - –ü–æ –∫–∞–∫–æ–π –≤–æ–æ–±—â–µ —Ñ–æ—Ä–º—É–ª–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ü–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
# delivery - –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
# link - –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—á—ë—Ç –∑–∞–∫–∞–∑–∞

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=Form.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        price = float(message.text)
    except ValueError:
        if (message.text=="/reset"):
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π "total_price" –≤ 0 –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_state = await state.get_data()
            current_state["total_price"] = 0
            await state.set_data(current_state)

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω—É–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            await message.answer("–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω–∞.")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö")

            await Form.waiting_for_price.set()

        elif (message.text=="/start"):
            await Form.waiting_for_price.set()
            current_state = await state.get_data()
            current_state["total_price"] = 0
            await state.set_data(current_state)

            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:")

        elif (message.text=="/delivery"):
            await Form.waiting_for_price.set()
            current_state = await state.get_data()
            await state.set_data(current_state)

            await message.answer("üì¶–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: 1600 - 2400 –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.")

        elif (message.text=="/formula"):
            await Form.waiting_for_price.set()
            current_state = await state.get_data()
            await state.set_data(current_state)

            await message.answer("üí∞–§–æ—Ä–º—É–ª–∞ -> ((—Ü–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö + 18—é) * 1.05 * 11.85(–∫—É—Ä—Å —é–∞–Ω–∏ –∫ —Ä—É–±–ª—é)) + 1000(–Ω–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è)")

        elif (message.text=="/link"):
            await Form.waiting_for_price.set()
            current_state = await state.get_data()
            await state.set_data(current_state)

            await message.answer("–ü–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–æ–≤ –ø–∏—Å–∞—Ç—å: https://t.me/poizon_1 –∏–ª–∏ https://t.me/honeymad_7")

        else:
            # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ–ª—å–∑—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FSM
    current_state = await state.get_data()

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å) –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ –≤ 0
    current_price = current_state.get("price", 0)

    # –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    new_price = math.ceil(math.ceil((price+18)*1.05) * 11.85)+1000
    current_state["price"] = new_price

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å) –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ –≤ 0
    total_price = current_state.get("total_price", 0)

    # –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    total_price += new_price
    current_state["total_price"] = total_price

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.set_data(current_state)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∏ –æ–±—â–µ–π —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–∞
    await message.answer(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {new_price} —Ä—É–±.\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞.")

if __name__ == '__main__':
    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)